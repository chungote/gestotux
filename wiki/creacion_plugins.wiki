#Como generar y compilar nuevos plugins en el programa

= Introduccion =

La idea basica de este programa es poder sumar caracteristicas al mismo simplemente agregardo una libreria dinamica que se pueda cargar en tiempo de ejecucion cuando cargue el programa y desde ahi, poder trabajar tranquilamente sin preocuparse por las consideraciones generales del programa, como manejo de ventanas, barras de herramientas, menus y actualizaciones.

= Como generar un nuevo plugin =

== Estructura ==

Cada plugin tiene necesariamente una estructura predefinida, puede ser de cualquiera de estos 3 tipos:
  * *Plugin general:* Es una libreria general que agrega una caracteristica simple al programa, como una barra de acciones, un nuevo menu, o todo un sistema completo de facturacion.
  * *Plugin de Informacion:* Es una libreria que posee los metodos para poder mejorar la interfaz de usuario con los datos especificos de un cliente, dandole un titlo al programa, un icono a la ventana principal entre otros datos.
  * *Plugin de base de datos:* -todavia no implementado-

== Creacion ==

Para generar un nuevo plugin, hacemos una nueva carpeta dentro de la carpeta de plugins, y generamos el archivo .pro necesario.
Se recomienda que se establezcan las siguientes variables para que se pueda cargar automaticamente al iniciarse el programa:

{{{
TEMPLATE = lib
CONFIG += dll \
plugin \
help
DESTDIR = ../../bin/plugins
INCLUDEPATH += ../../utiles
LIBS += ../../bin/libutiles.a
}}}

Definimos a este subproyecto como una libreria tipo plugin y le agregamos dll para que se gener como archivo dll en windows. La adicion de help es para que se pueda usar el sistema interno de ayuda. Agregamos ademas la libreria utiles que contiene las ventanas, visores de resumenes, acciones estandar y el sistema de ayuda.

=== Clase principal ===

Cuando se inicializa el plugin, se carga una clase que tiene como finalidad hacer la inicializacion del plugin antes de usarlo.
Para eso, implmementamos una de las interfaces elegidas:

*EPlugin*
 Esta clase nos da las funciones minimas y necesarias que se precisan para que el plugin pueda cargarse correctamente. Las funciones son las siguientes:

{{{ QList<QAction *> accionesBarra() const = 0; }}}
Es la funcion que se llamara cuando se busquen las acciones para colocar en la barra de herramientas.

{{{ virtual bool inicializar( QSettings *pref ) = 0; }}}
Es la funcion que se llamara antes que ninguna y se utiliza para inicializar todas las acciones, funciones y demas cosas que sean necesarias. El objeto pref, apunta a las preferencias del programa, es un objeto global y estatico. Si la inicializacion se hizo correctamente, debe retornar *true*, o *false* en otro caso.

{{{ virtual QWidgetList formsPreferencias() = 0; }}}
Devuelve la lista de QWidgets que se cargaran cuando se abran las preferencias del programa. Revise la pagina de formularios_preferencias para ver como implementarlo.

{{{ virtual QString nombre() const = 0; }}}
Devuelve el nombre interno del plugin. Sirve para buscar actualizaciones.

{{{ virtual int tipo() const = 0; }}}
Devuelve el tipo de plugin que es ( comentado al principio ).

{{{ virtual void crearMenu( QMenuBar *m ) = 0; }}}
Esta funcion le pasa la barra del menu para que se puedan crear todas las entradas necesarias.

{{{ virtual bool verificarTablas() = 0; }}}
Esta funcion tiene la finalidad de verificar que las tablas en la base de datos de este plugin estan en estado consistente y que existen. Si esta funcion devuelve *false*, se intentaran crear nuevamente las tablas.

{{{ virtual double version() const = 0; }}}
Devuelve la version del programa. Utilizada cuando se verifican las actualizaciones.

{{{ virtual void agregarVentana( QWidget *v ) = 0; }}}
Esta es una se√±al a la cual se debe llamar cada vez que se quiera agregar una nueva ventana.